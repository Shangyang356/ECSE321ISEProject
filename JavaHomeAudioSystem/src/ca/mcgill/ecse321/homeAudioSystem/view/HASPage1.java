package ca.mcgill.ecse321.homeAudioSystem.view;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.SqlDateModel;

import ca.mcgill.ecse321.homeAudioSystem.controller.HASController;
import ca.mcgill.ecse321.homeAudioSystem.controller.InvalidInputException;
import ca.mcgill.ecse321.homeAudioSystem.model.Album;
import ca.mcgill.ecse321.homeAudioSystem.model.Album.Genre;
import ca.mcgill.ecse321.homeAudioSystem.model.Artist;
import ca.mcgill.ecse321.homeAudioSystem.model.GroupLocation;
import ca.mcgill.ecse321.homeAudioSystem.model.Location;
import ca.mcgill.ecse321.homeAudioSystem.model.Manager;
import ca.mcgill.ecse321.homeAudioSystem.model.Playlist;
import ca.mcgill.ecse321.homeAudioSystem.model.Song;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JSpinner.DateEditor;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.awt.Font;
import java.util.List;
import java.util.Properties;

import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JSpinner;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.sql.Time;
import java.awt.event.ActionEvent;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerDateModel;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import java.awt.Color;

/**
 * @author Scott Sewell
 * The main UI for the home audio system.
 * Some of the code is auto generated by the form builder, so take care when editing.
 * If the form designer has a build error, likely a UI element has been incorrectly implemented.
 */
public class HASPage1 extends JFrame
{
	// unique identifier
	private static final long serialVersionUID = -5765054263357370025L;
	
	private JPanel contentPane;
	
	// home page UI elements
	private enum Library {Song, Artist, Album, Playlist};
	private enum Locations {Location, Group};
	private JComboBox<Library> comboBoxSearchMusic;
	private JComboBox<Locations> comboBoxSearchLocations;
	
	// library UI elements
	private JLabel labelSetLocVolume;
	
	private JList<Artist> listArtistLibrary;
	private JList<Playlist> listPlaylistLibrary;
	private JTable listSongLibrary;
	private JTable listAlbumLibrary;
	private JTable listLocations;
	private JTable listGroupLocations;
	
	private JTextField textFieldSongName;
	private JTextField textFieldArtistName;
	private JTextField textFieldAlbumName;
	private JTextField textFieldPlaylistName;
	private JTextField textFieldLocationName;
	private JTextField textFieldLocationGroupName;

	private JSpinner spinnerSongDuration;
	private JDatePickerImpl pickerAlbumReleaseDate;
	private JComboBox<Genre> comboBoxAlbumGenre;
	private JSlider sliderLocationVolume;
	private JRadioButton rdbtnLocationMute;
	private JTextField textFieldSearchSongs;
	private JTextField textFieldSearchLocations;
	private JTable listSelectLocations;
	private JTable listSelectMusic;
	private JTable listCurrentlyPlaying;

	// keeps track of where music is in the list in the model, compared to the list of reduced search results
	private HashMap<Integer, Integer> selectedMusicMap;
	private HashMap<Integer, Integer> selectedLocationMap;
	private List<Song> playingSongs;
	
	/**
	 * Creates and initializes a new form.
	 */
	public HASPage1()
	{
		// changes visual style
        try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {}
		
        // initialize the UI
		initComponents();
		refreshData();
	}
	
	/**
	 * Fills the forms with updated information and clears temporary data.
	 */
	private void refreshData()
	{
		Manager manager = Manager.getInstance();

		// ----- Home tab ------
		textFieldSearchSongs.setText("");
		textFieldSearchLocations.setText("");
		
		comboBoxSearchMusic.setModel(new DefaultComboBoxModel<Library>(Library.values()));
		updateSelectMusicLibrary(false);
		comboBoxSearchLocations.setModel(new DefaultComboBoxModel<Locations>(Locations.values()));
		updateSelectLocationLibrary(false);
		
		loadPlayingMusicTable(listCurrentlyPlaying);
		
		// ----- Library and Locations tabs ------
		// clear text boxes
		textFieldSongName.setText("");
		textFieldArtistName.setText("");
		textFieldAlbumName.setText("");
		textFieldPlaylistName.setText("");
		textFieldLocationName.setText("");
		textFieldLocationGroupName.setText("");
		
		// reset other elements
		Calendar date = Calendar.getInstance();
		date.set(Calendar.HOUR_OF_DAY, 0);
		date.set(Calendar.MINUTE, 0);
		date.set(Calendar.SECOND, 0);
		date.set(Calendar.MILLISECOND, 0);
		spinnerSongDuration.setValue(date.getTime());
		
		pickerAlbumReleaseDate.getModel().setValue(null);
		comboBoxAlbumGenre.setModel(new DefaultComboBoxModel<Genre>(Genre.values()));
		sliderLocationVolume.setMaximum(100);
		sliderLocationVolume.setMinimum(0);
		sliderLocationVolume.setValue(100);
		updateVolumeLabel();
		rdbtnLocationMute.setSelected(false);
		
		// populate lists and tables
		setBinding(manager.getArtists(), listArtistLibrary);
		setBinding(manager.getPlaylists(), listPlaylistLibrary);
		loadSongTable(listSongLibrary, null, false);
		loadAlbumTable(listAlbumLibrary, null, false);
		loadLocationTable(listLocations, null, false);
		loadLocationGroupTable(listGroupLocations, null, false);
	}
	
	/**
	 * Loads songs, artists, albums, or playlists into the music selection table fitting the any search terms
	 */
	private void updateSelectMusicLibrary(boolean search)
	{
		String searchText = search ? textFieldSearchSongs.getText() : null;
		switch (comboBoxSearchMusic.getItemAt(comboBoxSearchMusic.getSelectedIndex())) {
		case Song: loadSongTable(listSelectMusic, searchText, true); break;
		case Artist: loadArtistTable(listSelectMusic, searchText, true); break;
		case Album: loadAlbumTable(listSelectMusic, searchText, true); break;
		case Playlist: loadPlaylistTable(listSelectMusic, searchText, true); break;
		default: break;
		}
	}

	/**
	 * Loads locations or group locaions into the location selection table fitting the any search terms
	 */
	private void updateSelectLocationLibrary(boolean search)
	{
		String searchText = search ? textFieldSearchLocations.getText() : null;
		switch (comboBoxSearchLocations.getItemAt(comboBoxSearchLocations.getSelectedIndex())) {
		case Location: loadLocationTable(listSelectLocations, searchText, true); break;
		case Group: loadLocationGroupTable(listSelectLocations, searchText, true); break;
		default: break;
		}
	}
	
	/**
	 * Loads elements from a list into a Jlist.
	 * @param elements The list containing what needs is to be put into the jList.
	 * @param jList The target list to be populated.
	 */
	private <T> void setBinding(List<T> elements, JList<T> jList)
	{
		DefaultListModel<T> model = new DefaultListModel<T>();
		for (T element : elements) {
			model.addElement(element);
		}
		jList.setModel(model);
	}
	
	/**
	 * Fills the provided table with information about the music currently playing.
	 */
	private void loadPlayingMusicTable(JTable table)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 200, true, "Song"));
		colModel.addColumn(setCol(1, 300, true, "Location"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());

		Manager m = Manager.getInstance();
		
		playingSongs = new ArrayList<Song>();
		ArrayList<SongLocationsPair> songsWithLocations = new ArrayList<SongLocationsPair>();
		
		// build a list of songs paired with the locations they are playing at
		for (Location loc : m.getLocations()) {
			for (Song song : loc.getSongs()) {
				if (!playingSongs.contains(song)) {
					playingSongs.add(song);
					songsWithLocations.add(new SongLocationsPair(song, loc));
				} else {
					for (SongLocationsPair songWLoc : songsWithLocations) {
						if (songWLoc.song == song) {
							songWLoc.addLocation(loc);
						}
					}
				}
			}
		}
		
		for (SongLocationsPair songWLoc : songsWithLocations)
		{
			String locationsString = "";
			for (Location loc : songWLoc.getLocations()) {
				locationsString += (locationsString.length() != 0 ? ", "  : "") + loc.getName();
			}
			model.addRow(new Object[]{songWLoc.song, locationsString});
		}
		table.setModel(model);
		table.setColumnModel(colModel);
	}
	
	/**
	 * Fills the provided table with Song information.
	 */
	private void loadSongTable(JTable table, String search, boolean updateSearchMaps)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 300, true, "Name"));
		colModel.addColumn(setCol(1, 80, false, "Duration"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());
		
		if (updateSearchMaps) {
			selectedMusicMap = new HashMap<Integer, Integer>();
		}
		
		int count = 0;
		for (Song song : Manager.getInstance().getSongs())
		{
			if (search == null || (song.getName().toLowerCase().contains(search.toLowerCase()))) {
				if (updateSearchMaps) {
					selectedMusicMap.put(model.getRowCount(), count);
				}
				model.addRow(new Object[]{song, song.getDuration()});
			}
			count++;
		}
		
		table.setModel(model);
		table.setColumnModel(colModel);
	}
	
	/**
	 * Fills the provided table with Artist information.
	 */
	private void loadArtistTable(JTable table, String search, boolean updateSearchMaps)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 300, true, "Name"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());

		if (updateSearchMaps) {
			selectedMusicMap = new HashMap<Integer, Integer>();
		}
		
		int count = 0;
		for (Artist artist : Manager.getInstance().getArtists())
		{
			if (search == null || (artist.getName().toLowerCase().contains(search.toLowerCase()))) {
				if (updateSearchMaps) {
					selectedMusicMap.put(model.getRowCount(), count);
				}
				model.addRow(new Object[]{artist});
			}
			count++;
		}
		
		table.setModel(model);
		table.setColumnModel(colModel);
	}

	/**
	 * Fills the provided table with Album information.
	 */
	private void loadAlbumTable(JTable table, String search, boolean updateSearchMaps)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 200, true, "Name"));
		colModel.addColumn(setCol(1, 200, true, "Artists"));
		colModel.addColumn(setCol(2, 60, false, "Genre"));
		colModel.addColumn(setCol(3, 64, false, "Date"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());

		if (updateSearchMaps) {
			selectedMusicMap = new HashMap<Integer, Integer>();
		}
		
		int count = 0;
		for (Album album : Manager.getInstance().getAlbums())
		{
			String artistsString = "";
			for (Artist artist : album.getArtists()) {
				artistsString += (artistsString.length() != 0 ? ", "  : "") + artist.getName();
			}
			if (search == null || (album.getName().toLowerCase().contains(search.toLowerCase()))) {
				if (updateSearchMaps) {
					selectedMusicMap.put(model.getRowCount(), count);
				}
				model.addRow(new Object[]{album, artistsString, album.getGenre(), album.getReleaseDate()});
			}
			count++;
		}
		
		table.setModel(model);
		table.setColumnModel(colModel);
	}
	
	/**
	 * Fills the provided table with Playlist information.
	 */
	private void loadPlaylistTable(JTable table, String search, boolean updateSearchMaps)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 300, true, "Name"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());

		if (updateSearchMaps) {
			selectedMusicMap = new HashMap<Integer, Integer>();
		}
		
		int count = 0;
		for (Playlist playlist : Manager.getInstance().getPlaylists())
		{
			if (search == null || (playlist.getName().toLowerCase().contains(search.toLowerCase()))) {
				if (updateSearchMaps) {
					selectedMusicMap.put(model.getRowCount(), count);
				}
				model.addRow(new Object[]{playlist});
			}
			count++;
		}
		table.setModel(model);
		table.setColumnModel(colModel);
	}

	/**
	 * Fills the provided table with Location information.
	 */
	private void loadLocationTable(JTable table, String search, boolean updateSearchMaps)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 300, true, "Name"));
		colModel.addColumn(setCol(1, 80, false, "Volume"));
		colModel.addColumn(setCol(2, 80, false, "Muting"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());

		if (updateSearchMaps) {
			selectedLocationMap = new HashMap<Integer, Integer>();
		}
		
		int count = 0;
		for (Location location : Manager.getInstance().getLocations())
		{
			if (search == null || (location.getName().toLowerCase().contains(search.toLowerCase()))) {
				if (updateSearchMaps) {
					selectedLocationMap.put(model.getRowCount(), count);
				}
				model.addRow(new Object[]{location, location.getVolume(), location.getIsMuted() ? "Muted" : ""});
			}
			count++;
		}
		table.setModel(model);
		table.setColumnModel(colModel);
	}

	/**
	 * Fills the provided table with LocationGroup information.
	 */
	private void loadLocationGroupTable(JTable table, String search, boolean updateSearchMaps)
	{
		DefaultTableColumnModel colModel = new DefaultTableColumnModel();
		colModel.addColumn(setCol(0, 150, true, "Name"));
		colModel.addColumn(setCol(1, 300, true, "Locations"));
		
		DefaultTableModel model = createTableModel(colModel.getColumnCount());

		if (updateSearchMaps) {
			selectedLocationMap = new HashMap<Integer, Integer>();
		}
		
		int count = 0;
		for (GroupLocation group : Manager.getInstance().getGroupLocations())
		{
			String locations = "";
			for (Location location : group.getLocations()) {
				locations += (locations.length() != 0 ? ", "  : "") + location.getName();
			}
			if (search == null || (group.getName().toLowerCase().contains(search.toLowerCase()))) {
				if (updateSearchMaps) {
					selectedLocationMap.put(model.getRowCount(), count);
				}
				model.addRow(new Object[]{group, locations});
			}
			count++;
		}
		table.setModel(model);
		table.setColumnModel(colModel);
	}
	
	/**
	 * Prepares a table column used in the UI.
	 * @param index The position the column will be in the table.
	 * @param size The preferred size of the column.
	 * @param resizeable Whether the column width is resizeable by the user or not.
	 * @param name The title displayed at the column header.
	 * @return A column that can be inserted into a TableModel.
	 */
	private TableColumn setCol(int index, int size, boolean resizeable, String name)
	{
		TableColumn col = new TableColumn(index, size);
		col.setHeaderValue(name);
		col.setResizable(resizeable);
		if (!resizeable) {
			col.setMaxWidth(size);
			col.setMinWidth(size);
		}
		return col;
	}

	/**
	 * Creates a new table model with no rows and a set number of columns.
	 * @param numOfCols The number of columns to be used in the table.
	 * @return A new instance of a prepared table model.
	 */
	private DefaultTableModel createTableModel(int numOfCols)
	{
		Object[] cols = new Object[numOfCols];
		for (int i = 0; i < numOfCols; i++) {
			cols[i] = "";
		}
		return new DefaultTableModel(cols, 0) {
			private static final long serialVersionUID = 1241996439344687264L;
			@Override
		    public boolean isCellEditable(int i, int i1) {
		        return false;
		    }
		};
	}
	
	/**
	 * Plays the currently selected music at the currently selected locations
	 */
	private void playMusic()
	{
		HASController has = new HASController();
		try {
			List<Song> music = getSelectedMusic();
			List<Location> locs = getSelectedMusicLocations();
			has.assignMusicToLocations(locs, music);
			refreshData();
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Cannot play music!", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * Removes the currently selected music from any locations it is playing at
	 */
	private void removeMusic()
	{
		HASController has = new HASController();
		List<Song> musicToRemove = getSelectedPlayingSongs();
		if (musicToRemove.size() > 0) {
			for (Song song : musicToRemove) {
				has.removeMusicFromAllLocations(song);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No music selected!", "Unable to remove music!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Gets the user's selection of music in the home tab.
	 * 
	 * @return A new list of the selected songs.
	 */
	private List<Song> getSelectedMusic()
	{
		List<Song> selected = new ArrayList<Song>();
		for (int index : listSelectMusic.getSelectedRows())
		{
			int originalIndex = selectedMusicMap.get(index); // the index in the original list rather then the list of search results
			switch (comboBoxSearchMusic.getItemAt(comboBoxSearchMusic.getSelectedIndex())) {
			case Song: selected.add(Manager.getInstance().getSong(originalIndex)); break;
			case Artist: selected.addAll(Manager.getInstance().getArtist(originalIndex).getSongs()); break;
			case Album: selected.addAll(Manager.getInstance().getAlbum(originalIndex).getSongs()); break;
			case Playlist: selected.addAll(Manager.getInstance().getPlaylist(originalIndex).getSongs()); break;
			default: break;
			}
		}
		return selected;
	}
	
	/**
	 * Gets the user's selection of locations in the home tab.
	 * 
	 * @return A new list of the selected locations.
	 */
	private List<Location> getSelectedMusicLocations()
	{
		List<Location> selected = new ArrayList<Location>();
		for (int index : listSelectLocations.getSelectedRows())
		{
			int originalIndex = selectedLocationMap.get(index); // the index in the original list rather then the list of search results
			switch (comboBoxSearchLocations.getItemAt(comboBoxSearchLocations.getSelectedIndex())) {
			case Location: selected.add(Manager.getInstance().getLocation(originalIndex)); break;
			case Group: selected.addAll(Manager.getInstance().getGroupLocation(originalIndex).getLocations()); break;
			default: break;
			}
		}
		return selected;
	}
	
	/**
	 * Gets the user's selection of currently playing songs in the home tab.
	 * 
	 * @return A new list of songs.
	 */
	private List<Song> getSelectedPlayingSongs()
	{
		List<Song> selected = new ArrayList<Song>();
		for (int index : listCurrentlyPlaying.getSelectedRows()) {
			selected.add(playingSongs.get(index));
		}
		return selected;
	}
	
	/**
	 * Adds a song to the library, sorts the library, then refreshes the ui if successful.
	 * If unsuccessful, an error message dialogue is opened.
	 */
	private void addSong()
	{
		HASController has = new HASController();
		try {
			String name = textFieldSongName.getText();
			Calendar calendar = Calendar.getInstance();
			calendar.setTime((Date) spinnerSongDuration.getValue());
			calendar.set(2000, 1, 1);
			Time duration = new Time(calendar.getTimeInMillis());
			
			has.addSong(name, duration);
			has.sortSongsByName();
			refreshData();
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Unable to add song!", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * Adds an artist to the library, then refreshes the ui if successful.
	 * If unsuccessful, an error message dialogue is opened.
	 */
	private void addArtist()
	{
		HASController has = new HASController();
		try {
			String name = textFieldArtistName.getText();
			List<Song> songs = getSelectedSongs();
			
			has.addArtist(name, songs);
			has.sortArtistsByName();
			refreshData();
			
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Unable to add Artist!", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * Adds an Album to the library, then refreshes the ui if successful.
	 * If unsuccessful, an error message dialogue is opened.
	 */
	private void addAlbum()
	{
		HASController has = new HASController();
		try {
			String name = textFieldAlbumName.getText();
			List<Song> songs = getSelectedSongs();
			Genre genre = comboBoxAlbumGenre.getItemAt(comboBoxAlbumGenre.getSelectedIndex());
			java.sql.Date releaseDate = (java.sql.Date)pickerAlbumReleaseDate.getModel().getValue();
			
			has.addAlbum(name, songs, genre, releaseDate);
			has.sortAlbumsByName();
			refreshData();
			
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Unable to add Album!", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * Adds a playlist to the library, then refreshes the ui if successful.
	 * If unsuccessful, an error message dialogue is opened.
	 */
	private void addPlaylist()
	{
		HASController has = new HASController();
		try {
			String name = textFieldPlaylistName.getText();
			List<Song> songs = getSelectedSongs();
			
			has.addPlaylist(name, songs);
			has.sortPlaylistsByName();
			refreshData();
			
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Unable to add Playlist!", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * Adds a location to the library, then refreshes the ui if successful.
	 * If unsuccessful, an error message dialogue is opened.
	 */
	private void addLocation()
	{
		HASController has = new HASController();
		try {
			String name = textFieldLocationName.getText();
			
			has.addLocation(name);
			has.sortLocationsByName();
			refreshData();
			
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Unable to add Location!", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Adds a group location to the library, then refreshes the ui if successful.
	 * If unsuccessful, an error message dialogue is opened.
	 */
	private void addGroupLocation()
	{
		HASController has = new HASController();
		try {
			String name = textFieldLocationGroupName.getText();
			List<Location> locations = getSelectedLocations();
			
			has.addGroupLocation(name, locations);
			has.sortGroupLocationsByName();
			refreshData();
			
		} catch (InvalidInputException e) {
			JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Unable to add Location!", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Removes all selected songs from the library, then refreshes the ui.
	 */
	private void deleteSongs()
	{
		HASController has = new HASController();
		// build deletion queue to prevent out of bounds error during removal
		List<Song> songsToRemove = new ArrayList<Song>();
		for (int index : listSongLibrary.getSelectedRows()) {
			songsToRemove.add(Manager.getInstance().getSong(index));
		}
		if (songsToRemove.size() > 0) {
			for (Song song : songsToRemove) {
				has.deleteSong(song);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No songs selected!", "Unable to remove songs!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Removes all selected artists from the library, then refreshes the ui.
	 */
	private void deleteArtists()
	{
		HASController has = new HASController();
		List<Artist> artistsToRemove = listArtistLibrary.getSelectedValuesList();
		if (artistsToRemove.size() > 0) {
			for (Artist artist : artistsToRemove) {
				has.deleteArtist(artist);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No aritsts selected!", "Unable to remove artists!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Removes all selected albums from the library, then refreshes the ui.
	 */
	private void deleteAlbums()
	{
		HASController has = new HASController();
		// build deletion queue to prevent out of bounds error during removal
		List<Album> albumsToRemove = new ArrayList<Album>();
		for (int index : listAlbumLibrary.getSelectedRows()) {
			albumsToRemove.add(Manager.getInstance().getAlbum(index));
		}
		if (albumsToRemove.size() > 0) {
			for (Album album : albumsToRemove) {
				has.deleteAlbum(album);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No albums selected!", "Unable to remove albums!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Removes all selected playlists from the library, then refreshes the ui.
	 */
	private void deletePlaylist()
	{
		HASController has = new HASController();
		List<Playlist> playlistsToRemove = listPlaylistLibrary.getSelectedValuesList();
		if (playlistsToRemove.size() > 0) {
			for (Playlist playlist : playlistsToRemove) {
				has.deletePlaylist(playlist);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No playlists selected!", "Unable to remove playlists!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Removes all selected locations from the library, then refreshes the ui.
	 */
	private void deleteLocations()
	{
		HASController has = new HASController();
		// build deletion queue to prevent out of bounds error during removal
		List<Location> locationsToRemove = new ArrayList<Location>();
		for (int index : listLocations.getSelectedRows()) {
			locationsToRemove.add(Manager.getInstance().getLocation(index));
		}
		if (locationsToRemove.size() > 0) {
			for (Location location : locationsToRemove) {
				has.deleteLocation(location);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No locations selected!", "Unable to remove locations!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Removes all selected group locations from the library, then refreshes the ui.
	 */
	private void deleteGroupLocations()
	{
		HASController has = new HASController();
		// build deletion queue to prevent out of bounds error during removal
		List<GroupLocation> groupsToRemove = new ArrayList<GroupLocation>();
		for (int index : listGroupLocations.getSelectedRows()) {
			groupsToRemove.add(Manager.getInstance().getGroupLocation(index));
		}
		if (groupsToRemove.size() > 0) {
			for (GroupLocation groupLoc : groupsToRemove) {
				has.deleteGroupLocation(groupLoc);
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No location groups selected!", "Unable to remove location groups!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Sets the volume and muting at the selected locations
	 */
	private void setLocationVolume()
	{
		HASController has = new HASController();
		
		int volume = sliderLocationVolume.getValue();
		boolean mute = rdbtnLocationMute.isSelected();
		List<Location> locations = getSelectedLocations();
		
		if (locations.size() > 0) {
			for (Location location : locations) {
				try {
					has.setLocationMute(location, mute);
					has.setVolume(volume, location);
				} catch (Exception e) {}
			}
			refreshData();
		} else {
			JOptionPane.showMessageDialog(new JFrame(), "No locations selected!", "Unable to change Volume!", JOptionPane.WARNING_MESSAGE);
		}
	}
	
	/**
	 * Gets the user's selection of songs in the song library.
	 * 
	 * @return A new list of songs.
	 */
	private List<Song> getSelectedSongs()
	{
		List<Song> selected = new ArrayList<Song>();
		for (int index : listSongLibrary.getSelectedRows()) {
			selected.add(Manager.getInstance().getSong(index));
		}
		return selected;
	}
	
	/**
	 * Gets the user's selection of locations in the location library.
	 * 
	 * @return A new list of locations.
	 */
	private List<Location> getSelectedLocations()
	{
		List<Location> selected = new ArrayList<Location>();
		for (int index : listLocations.getSelectedRows()) {
			selected.add(Manager.getInstance().getLocation(index));
		}
		return selected;
	}
	
	/**
	 * Changes the displayed volume on the locations tab to that of the set volume slider.
	 */
	private void updateVolumeLabel()
	{
		labelSetLocVolume.setText("Volume: " + sliderLocationVolume.getValue());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * This is auto-generated from the form builder.
	 */
	private void initComponents()
	{
		setResizable(false);
		setTitle("Home Audio System");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 868, 688);
		contentPane = new JPanel();
		contentPane.setBackground(Color.DARK_GRAY);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(0, 0, 864, 662);
		
		JPanel panel = new JPanel();
		tabbedPane.addTab("Home", null, panel, null);
		
		JLabel lblNewLabel_2 = new JLabel("Libraries");
		lblNewLabel_2.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNewLabel_2.setBounds(10, 26, 80, 14);
		panel.setLayout(null);
		
		JScrollPane scrollPane_6 = new JScrollPane();
		scrollPane_6.setBounds(424, 51, 425, 572);
		panel.add(scrollPane_6);
		
		listCurrentlyPlaying = new JTable();
		listCurrentlyPlaying.setShowVerticalLines(false);
		listCurrentlyPlaying.setShowGrid(false);
		scrollPane_6.setViewportView(listCurrentlyPlaying);
		panel.add(lblNewLabel_2);
		
		JLabel lblCurrentlyPlaying = new JLabel("Currently Playing");
		lblCurrentlyPlaying.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblCurrentlyPlaying.setBounds(424, 26, 150, 14);
		panel.add(lblCurrentlyPlaying);
		
		JLabel label_3 = new JLabel("Locations");
		label_3.setFont(new Font("Tahoma", Font.BOLD, 11));
		label_3.setBounds(10, 361, 66, 14);
		panel.add(label_3);
		
		JScrollPane scrollPane_7 = new JScrollPane();
		scrollPane_7.setBounds(10, 51, 372, 286);
		panel.add(scrollPane_7);
		
		listSelectMusic = new JTable();
		listSelectMusic.setShowVerticalLines(false);
		listSelectMusic.setShowGrid(false);
		scrollPane_7.setViewportView(listSelectMusic);
		
		textFieldSearchSongs = new JTextField();
		textFieldSearchSongs.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				updateSelectMusicLibrary(true);
			}
		});
		textFieldSearchSongs.setToolTipText("Search through the selected library.");
		textFieldSearchSongs.setBounds(229, 23, 153, 20);
		panel.add(textFieldSearchSongs);
		textFieldSearchSongs.setColumns(10);
		
		comboBoxSearchMusic = new JComboBox<Library>();
		comboBoxSearchMusic.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				updateSelectMusicLibrary(true);
			}
		});
		comboBoxSearchMusic.setBounds(100, 23, 119, 20);
		panel.add(comboBoxSearchMusic);
		
		comboBoxSearchLocations = new JComboBox<Locations>();
		comboBoxSearchLocations.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				updateSelectLocationLibrary(true);
			}
		});
		comboBoxSearchLocations.setBounds(100, 358, 119, 20);
		panel.add(comboBoxSearchLocations);
		
		textFieldSearchLocations = new JTextField();
		textFieldSearchLocations.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				updateSelectLocationLibrary(true);
			}
		});
		textFieldSearchLocations.setToolTipText("Search through the selected locations.");
		textFieldSearchLocations.setColumns(10);
		textFieldSearchLocations.setBounds(229, 358, 153, 20);
		panel.add(textFieldSearchLocations);
		
		JScrollPane scrollPane_8 = new JScrollPane();
		scrollPane_8.setBounds(10, 386, 372, 202);
		panel.add(scrollPane_8);
		
		listSelectLocations = new JTable();
		listSelectLocations.setShowVerticalLines(false);
		listSelectLocations.setShowGrid(false);
		scrollPane_8.setViewportView(listSelectLocations);
		
		JButton btnAddselected = new JButton("Add Selected");
		btnAddselected.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				playMusic();
			}
		});
		btnAddselected.setBounds(10, 600, 120, 23);
		panel.add(btnAddselected);
		
		JButton btnRemoveSelected = new JButton("Remove Selected");
		btnRemoveSelected.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				removeMusic();
			}
		});
		btnRemoveSelected.setBounds(262, 600, 120, 23);
		panel.add(btnRemoveSelected);
		
		JPanel panel_1 = new JPanel();
		tabbedPane.addTab("Music", null, panel_1, null);
		
		textFieldSongName = new JTextField();
		textFieldSongName.setBounds(84, 30, 182, 20);
		textFieldSongName.setToolTipText("The name of the song.");
		textFieldSongName.setHorizontalAlignment(SwingConstants.LEFT);
		textFieldSongName.setColumns(10);
		
		JButton btnAddSong = new JButton("Add Song");
		btnAddSong.setBounds(10, 82, 109, 23);
		btnAddSong.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				addSong();
			}
		});
		btnAddSong.setToolTipText("Adds new song to the library.");
		
		JLabel lblAddNewSong = new JLabel("Add New Song");
		lblAddNewSong.setBounds(10, 10, 263, 14);
		lblAddNewSong.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel lblName = new JLabel("Name:");
		lblName.setBounds(10, 33, 70, 14);
		
		JLabel lblDuration = new JLabel("Duration:");
		lblDuration.setBounds(10, 59, 70, 14);
		
		spinnerSongDuration = new JSpinner(new SpinnerDateModel());
		DateEditor durationEditor = new DateEditor(spinnerSongDuration, "HH:mm:ss");
		spinnerSongDuration.setEditor(durationEditor);
		spinnerSongDuration.setBounds(84, 56, 182, 20);
		spinnerSongDuration.setToolTipText("The length of the song in hours, minutes, and seconds.");
		 
		JLabel lblAddNewAlbum = new JLabel("Add New Artist");
		lblAddNewAlbum.setBounds(10, 162, 83, 14);
		lblAddNewAlbum.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel label_1 = new JLabel("Name:");
		label_1.setBounds(10, 185, 70, 14);
		
		textFieldArtistName = new JTextField();
		textFieldArtistName.setBounds(84, 182, 182, 20);
		textFieldArtistName.setToolTipText("The artist's name.");
		textFieldArtistName.setHorizontalAlignment(SwingConstants.LEFT);
		textFieldArtistName.setColumns(10);
		
		JButton btnAddArtist = new JButton("Add Artist");
		btnAddArtist.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				addArtist();
			}
		});
		btnAddArtist.setBounds(10, 208, 109, 23);
		btnAddArtist.setToolTipText("Adds new artist to the library.");
		
		JLabel lblSongLibrary = new JLabel("Song Library");
		lblSongLibrary.setBounds(286, 10, 127, 14);
		lblSongLibrary.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel lblArtistLibrary = new JLabel("Artist Library");
		lblArtistLibrary.setBounds(588, 10, 166, 14);
		lblArtistLibrary.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel lblAddNewAlbum_1 = new JLabel("Add New Album");
		lblAddNewAlbum_1.setBounds(10, 326, 256, 14);
		lblAddNewAlbum_1.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel label = new JLabel("Name:");
		label.setBounds(10, 346, 70, 14);
		
		textFieldAlbumName = new JTextField();
		textFieldAlbumName.setBounds(84, 346, 182, 20);
		textFieldAlbumName.setToolTipText("The albums's name.");
		textFieldAlbumName.setHorizontalAlignment(SwingConstants.LEFT);
		textFieldAlbumName.setColumns(10);
		
		JLabel lblAlbumLibrary = new JLabel("Album Library");
		lblAlbumLibrary.setBounds(286, 326, 127, 14);
		lblAlbumLibrary.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JButton btnAddAlbum = new JButton("Add Album");
		btnAddAlbum.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addAlbum();
			}
		});
		btnAddAlbum.setBounds(10, 424, 109, 23);
		btnAddAlbum.setToolTipText("Creates a new album with any selected songs and artists.");
		
		JLabel lblReleaseDate = new JLabel("Release Date:");
		lblReleaseDate.setBounds(10, 401, 96, 14);

		SqlDateModel model = new SqlDateModel();
		Properties p = new Properties();
		p.put("text.today", "Today");
		p.put("text.month", "Month");
		p.put("text.year", "Year");
		JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
		pickerAlbumReleaseDate = new JDatePickerImpl(datePanel, new DateLabelFormatter());
		pickerAlbumReleaseDate.setBounds(116, 396, 150, 23);
		pickerAlbumReleaseDate.setToolTipText("The date the album was released.");
		
		JLabel lblGenre = new JLabel("Genre:");
		lblGenre.setBounds(10, 375, 70, 14);
		
		comboBoxAlbumGenre = new JComboBox<Genre>();
		comboBoxAlbumGenre.setBounds(84, 372, 182, 20);
		comboBoxAlbumGenre.setToolTipText("The type of music in the album.");
		
		JLabel lblAddNewPlaylist = new JLabel("Add New Playlist");
		lblAddNewPlaylist.setBounds(10, 500, 256, 14);
		lblAddNewPlaylist.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JButton btnAddPlaylist = new JButton("Add Playlist");
		btnAddPlaylist.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addPlaylist();
			}
		});
		btnAddPlaylist.setBounds(10, 546, 109, 23);
		btnAddPlaylist.setToolTipText("Creates a new playlist of any selected songs.");
		
		JLabel lblPlaylistLibrary = new JLabel("Playlist Library");
		lblPlaylistLibrary.setBounds(706, 326, 131, 14);
		lblPlaylistLibrary.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel label_2 = new JLabel("Name:");
		label_2.setBounds(10, 523, 70, 14);
		
		textFieldPlaylistName = new JTextField();
		textFieldPlaylistName.setBounds(84, 520, 182, 20);
		textFieldPlaylistName.setToolTipText("The playlist's name.");
		textFieldPlaylistName.setHorizontalAlignment(SwingConstants.LEFT);
		textFieldPlaylistName.setColumns(10);
		
		JButton btnDeleteSongs = new JButton("Delete Songs");
		btnDeleteSongs.setBounds(157, 81, 109, 23);
		btnDeleteSongs.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteSongs();
			}
		});
		btnDeleteSongs.setVerticalAlignment(SwingConstants.BOTTOM);
		btnDeleteSongs.setToolTipText("Removes selected songs from the library.");
		
		JButton btnDeleteArtists = new JButton("Delete Artists");
		btnDeleteArtists.setBounds(157, 208, 109, 23);
		btnDeleteArtists.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				deleteArtists();
			}
		});
		btnDeleteArtists.setToolTipText("Removes selected artists from the library.");
		
		JButton btnDeleteAlbums = new JButton("Delete Albums");
		btnDeleteAlbums.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteAlbums();
			}
		});
		btnDeleteAlbums.setBounds(157, 424, 109, 23);
		btnDeleteAlbums.setToolTipText("Removes selected albums from the library.");
		
		JButton btnDeletePlaylists = new JButton("Delete Playlists");
		btnDeletePlaylists.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deletePlaylist();
			}
		});
		btnDeletePlaylists.setBounds(157, 546, 109, 23);
		btnDeletePlaylists.setToolTipText("Removes selected playlists from the library.");
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(286, 30, 291, 278);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(286, 345, 410, 278);
		
		JScrollPane scrollPane_2 = new JScrollPane();
		scrollPane_2.setBounds(587, 30, 262, 278);
		
		JScrollPane scrollPane_3 = new JScrollPane();
		scrollPane_3.setBounds(706, 345, 143, 278);
		
		listPlaylistLibrary = new JList<Playlist>();
		scrollPane_3.setViewportView(listPlaylistLibrary);
		listPlaylistLibrary.setBorder(null);
		
		listArtistLibrary = new JList<Artist>();
		listArtistLibrary.setBorder(null);
		scrollPane_2.setViewportView(listArtistLibrary);
		
		listAlbumLibrary = new JTable();
		scrollPane_1.setViewportView(listAlbumLibrary);
		listAlbumLibrary.setShowGrid(false);
		listAlbumLibrary.setBorder(null);
		listAlbumLibrary.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		listAlbumLibrary.setShowVerticalLines(false);
		
		listSongLibrary = new JTable();
		listSongLibrary.setShowVerticalLines(false);
		listSongLibrary.setShowGrid(false);
		listSongLibrary.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		scrollPane.setViewportView(listSongLibrary);
		listSongLibrary.setBorder(null);
		panel_1.setLayout(null);
		panel_1.add(lblName);
		panel_1.add(textFieldSongName);
		panel_1.add(lblAddNewSong);
		panel_1.add(btnAddSong);
		panel_1.add(btnDeleteSongs);
		panel_1.add(lblDuration);
		panel_1.add(spinnerSongDuration);
		panel_1.add(label_1);
		panel_1.add(textFieldArtistName);
		panel_1.add(lblAddNewAlbum);
		panel_1.add(btnAddArtist);
		panel_1.add(btnDeleteArtists);
		panel_1.add(lblAddNewAlbum_1);
		panel_1.add(label);
		panel_1.add(textFieldAlbumName);
		panel_1.add(lblGenre);
		panel_1.add(comboBoxAlbumGenre);
		panel_1.add(btnAddAlbum);
		panel_1.add(btnDeleteAlbums);
		panel_1.add(lblReleaseDate);
		panel_1.add(pickerAlbumReleaseDate);
		panel_1.add(lblAddNewPlaylist);
		panel_1.add(btnAddPlaylist);
		panel_1.add(btnDeletePlaylists);
		panel_1.add(label_2);
		panel_1.add(textFieldPlaylistName);
		panel_1.add(scrollPane);
		panel_1.add(lblSongLibrary);
		panel_1.add(lblArtistLibrary);
		panel_1.add(scrollPane_2);
		panel_1.add(lblAlbumLibrary);
		panel_1.add(scrollPane_1);
		panel_1.add(lblPlaylistLibrary);
		panel_1.add(scrollPane_3);
		
		JPanel panel_2 = new JPanel();
		tabbedPane.addTab("Locations", null, panel_2, null);
		
		JLabel lblNewLabel = new JLabel("Add New Location");
		lblNewLabel.setBounds(10, 10, 270, 14);
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JLabel lblNewLabel_1 = new JLabel("Name:");
		lblNewLabel_1.setBounds(10, 33, 70, 14);
		
		JButton btnAddLocation = new JButton("Add Location");
		btnAddLocation.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addLocation();
			}
		});
		btnAddLocation.setBounds(10, 56, 111, 23);
		btnAddLocation.setToolTipText("Adds a new home location.");
		
		textFieldLocationName = new JTextField();
		textFieldLocationName.setBounds(84, 30, 182, 20);
		textFieldLocationName.setToolTipText("The name of the new home location.");
		textFieldLocationName.setHorizontalAlignment(SwingConstants.LEFT);
		textFieldLocationName.setColumns(10);
		
		JLabel lblLocations = new JLabel("Locations");
		lblLocations.setBounds(286, 10, 84, 14);
		lblLocations.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JButton btnSaveLocationSettings = new JButton("Save Location Settings");
		btnSaveLocationSettings.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setLocationVolume();
			}
		});
		btnSaveLocationSettings.setBounds(639, 277, 141, 23);
		btnSaveLocationSettings.setToolTipText("Saves the displayed volume settings to selected locations.");
		
		rdbtnLocationMute = new JRadioButton("Mute");
		rdbtnLocationMute.setToolTipText("Don't play sound.");
		rdbtnLocationMute.setBounds(563, 277, 49, 23);
		
		sliderLocationVolume = new JSlider();
		sliderLocationVolume.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent arg0) {
				updateVolumeLabel();
			}
		});
		sliderLocationVolume.setMinorTickSpacing(1);
		sliderLocationVolume.setSnapToTicks(true);
		sliderLocationVolume.setToolTipText("The volume of a location (0-100).");
		sliderLocationVolume.setBounds(364, 274, 182, 28);
		
		labelSetLocVolume = new JLabel("Volume: ");
		labelSetLocVolume.setBounds(287, 274, 83, 28);
		
		JLabel lblLocationGroups = new JLabel("Location Groups");
		lblLocationGroups.setBounds(286, 326, 112, 14);
		lblLocationGroups.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		textFieldLocationGroupName = new JTextField();
		textFieldLocationGroupName.setBounds(84, 346, 182, 20);
		textFieldLocationGroupName.setToolTipText("The length of the song in seconds.");
		textFieldLocationGroupName.setHorizontalAlignment(SwingConstants.LEFT);
		textFieldLocationGroupName.setColumns(10);
		
		JLabel label_4 = new JLabel("Name:");
		label_4.setBounds(10, 348, 70, 14);
		
		JLabel lblAddNewLocation = new JLabel("Add New Location Group");
		lblAddNewLocation.setBounds(10, 326, 261, 14);
		lblAddNewLocation.setFont(new Font("Tahoma", Font.BOLD, 11));
		
		JButton btnAddGoup = new JButton("Add Group");
		btnAddGoup.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addGroupLocation();
			}
		});
		btnAddGoup.setBounds(10, 373, 111, 23);
		btnAddGoup.setToolTipText("Adds a new home location.");
		
		JButton btnDeleteLocations = new JButton("Delete Locations");
		btnDeleteLocations.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteLocations();
			}
		});
		btnDeleteLocations.setBounds(155, 56, 111, 23);
		btnDeleteLocations.setToolTipText("Removes selected locations from the audio system.");
		
		JButton btnDeleteGroups = new JButton("Delete Groups");
		btnDeleteGroups.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteGroupLocations();
			}
		});
		contentPane.setLayout(null);
		btnDeleteGroups.setBounds(155, 373, 111, 23);
		btnDeleteGroups.setToolTipText("Removes selected location groups from the audio system.");
		
		JScrollPane scrollPane_4 = new JScrollPane();
		scrollPane_4.setBounds(286, 345, 562, 278);
		
		JScrollPane scrollPane_5 = new JScrollPane();
		scrollPane_5.setBounds(286, 30, 562, 238);
		
		listLocations = new JTable();
		listLocations.setShowGrid(false);
		listLocations.setShowVerticalLines(false);
		scrollPane_5.setViewportView(listLocations);
		listLocations.setBorder(null);
		
		listGroupLocations = new JTable();
		listGroupLocations.setShowGrid(false);
		listGroupLocations.setShowVerticalLines(false);
		scrollPane_4.setViewportView(listGroupLocations);
		listGroupLocations.setBorder(null);
		panel_2.setLayout(null);
		panel_2.add(lblNewLabel);
		panel_2.add(lblLocations);
		panel_2.add(lblNewLabel_1);
		panel_2.add(textFieldLocationName);
		panel_2.add(btnAddLocation);
		panel_2.add(btnDeleteLocations);
		panel_2.add(labelSetLocVolume);
		panel_2.add(sliderLocationVolume);
		panel_2.add(rdbtnLocationMute);
		panel_2.add(btnSaveLocationSettings);
		panel_2.add(scrollPane_5);
		panel_2.add(lblAddNewLocation);
		panel_2.add(lblLocationGroups);
		panel_2.add(label_4);
		panel_2.add(textFieldLocationGroupName);
		panel_2.add(btnAddGoup);
		panel_2.add(btnDeleteGroups);
		panel_2.add(scrollPane_4);
		contentPane.add(tabbedPane);
	}
}

class SongLocationsPair
{
	public final Song song;
	ArrayList<Location> locs = new ArrayList<Location>();
	
	public SongLocationsPair(Song asong, Location location) {
		this.song = asong;
		locs.add(location);
	}
	
	public void addLocation(Location loc) {
		locs.add(loc);
	}
	
	public List<Location> getLocations() {
		return locs;
	}
}
